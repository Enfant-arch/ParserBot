# - *- coding: utf- 8 - *-
import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from admin_panel.filters import IsAdmin
from keyboards.default import get_functions_func, check_user_out_func
from keyboards.inline import *
from loader import dp, bot
from states import StorageFunctions
from utils.db_api.psql  import get_purchasex, update_userx, last_purchasesx, get_all_usersx


# –†–∞–∑–±–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–ª–µ—Ç–∞–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç –¢–ì
def split_messages(get_list, count):
    return [get_list[i:i + count] for i in range(0, len(get_list), count)]


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—ã–ª–∫–∞"
@dp.message_handler(IsAdmin(), text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", state="*")
async def send_ad_all_users(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("üì¢ <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b>")
    await StorageFunctions.here_ad_text.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è"
@dp.message_handler(IsAdmin(), text="üì± –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è üîç", state="*")
async def search_profile(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>üì± –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä:</b>\n"
                         "‚ñ∂ 123456789\n"
                         "‚ñ∂ @example")
    await StorageFunctions.here_search_profile.set()




# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(IsAdmin(), state=StorageFunctions.here_ad_text)
async def input_text_for_ad(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["here_send_ad"] = "üì¢ –†–∞—Å—Å—ã–ª–∫–∞.\n" + str(message.text)
    users = get_all_usersx()

    await StorageFunctions.here_ad_text.set()
    await bot.send_message(message.from_user.id,
                           f"üì¢ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
                           f"‚ñ∂ <code>{message.text}</code>\n"
                           f"üë§ <code>{len(users)}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
                           reply_markup=sure_send_ad_inl)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text=["not_send_kb", "yes_send_ad"], state=StorageFunctions.here_ad_text)
async def sends_ad(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    if call.data == "not_send_kb":
        await state.finish()
        await call.message.answer("<b>üì¢ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ ‚òë</b>")
    else:
        await call.message.answer(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...</b>")
        async with state.proxy() as data:
            send_ad_message = data["here_send_ad"]
        await state.finish()
        asyncio.create_task(send_message_to_user(send_ad_message, call.from_user.id))


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_message_to_user(message, user_id):
    receive_users, block_users = 0, 0
    users = get_all_usersx()
    for user in users:
        try:
            await bot.send_message(user[1], message)
            receive_users += 1
        except:
            block_users += 1
        await asyncio.sleep(0.05)
    await bot.send_message(user_id,
                           f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚òë</b>\n"
                           f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{receive_users} ‚úÖ</code>\n"
                           f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{block_users} ‚ùå</code>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–π–¥–∏ –∏–ª–∏ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(IsAdmin(), state=StorageFunctions.here_search_profile)
async def input_data_for_search_profile(message: types.Message, state: FSMContext):
    get_user_data = message.text
    if get_user_data.isdigit():
        get_user_id = get_userx(user_id=get_user_data)
    else:
        get_user_data = get_user_data[1:]
        get_user_id = get_userx(user_login=get_user_data.lower())
    if get_user_id is not None:
        await message.answer(search_user_profile(get_user_id[0]), reply_markup=search_profile_func(get_user_id[0]))
        await state.finish()
    else:
        await message.answer("<b>‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω</b>\n"
                             "üì± –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä:\n"
                             "‚ñ∂ 123456789\n"
                             "‚ñ∂ @example")
        await StorageFunctions.here_search_profile.set()


# –ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(IsAdmin(), text_startswith="show_purchases", state="*")
async def change_user_sale(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    last_purchases = last_purchasesx(user_id)
    if len(last_purchases) >= 1:
        await call.message.delete()
        count_split = 0
        save_purchases = []
        for purchases in last_purchases:
            save_purchases.append(f"<b>üìÉ –ß–µ–∫:</b> <code>#{purchases[4]}</code>\n"
                                  f"‚ñ∂ {purchases[9]} | {purchases[5]}—à—Ç | {purchases[6]}—Ä—É–±\n"
                                  f"üïú {purchases[13]}\n"
                                  f"<code>{purchases[10]}</code>")
        await call.message.answer("<b>üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫</b>\n"
                                  "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
        save_purchases.reverse()
        len_purchases = len(save_purchases)
        if len_purchases > 4:
            count_split = round(len_purchases / 4)
            count_split = len_purchases // count_split
        if count_split > 1:
            get_message = split_messages(save_purchases, count_split)
            for msg in get_message:
                send_message = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n".join(msg)
                await call.message.answer(send_message)
        else:
            send_message = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n".join(save_purchases)
            await call.message.answer(send_message)
        await call.message.answer(search_user_profile(user_id), reply_markup=search_profile_func(user_id))
    else:
        await bot.answer_callback_query(call.id, "‚ùó –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏")


# –í—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="add_status", state="*")
async def add_balance_user(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["here_cache_user_id"] = call.data.split(":")[1]
        user = get_userx(user_id = data["here_cache_user_id"])
    await call.message.delete()
    await call.message.answer(f"<b>üí¥ –í—ã –≤—ã–¥–∞–µ—Ç–µ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[2]}</b>")
    await StorageFunctions.here_add_balance.set()


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message_handler(IsAdmin(), state=StorageFunctions.here_add_balance)
async def input_add_balance(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        get_amount = int(message.text)
        if get_amount >= 1:
            async with state.proxy() as data:
                user_id = data["here_cache_user_id"]
            get_user = get_userx(user_id=user_id)
            update_userx(user_id, balance=int(get_user[4]) + get_amount)
            await message.answer("<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b> "
                                 f"<a href='tg://user?id={get_user[1]}'>{get_user[3]}</a> "
                                 f"<b>–±—ã–ª–æ –≤—ã–¥–∞–Ω–æ</b> <code>{get_amount}—Ä—É–±</code>",
                                reply_markup= await check_user_out_func(message.from_user.id))
            await bot.send_message(user_id, f"<b>üí≥ –í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ</b> <code>{get_amount}—Ä—É–±</code>")
            await message.answer(search_user_profile(user_id), reply_markup=search_profile_func(user_id))
            await state.finish()
        else:
            await message.answer("<b>‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–¥–∞—á–∏ 1—Ä—É–±</b>\n"
                                 "üí¥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞")
            await StorageFunctions.here_add_balance.set()
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üí¥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞")
        await StorageFunctions.here_add_balance.set()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="set_balance", state="*")
async def set_balance_user(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["here_cache_user_id"] = call.data.split(":")[1]
    await call.message.delete()
    await call.message.answer("<b>üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>")
    await StorageFunctions.here_set_balance.set()


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(IsAdmin(), state=StorageFunctions.here_set_balance)
async def input_set_balance(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        get_amount = int(message.text)
        if get_amount >= 0:
            async with state.proxy() as data:
                user_id = data["here_cache_user_id"]
            get_user = get_userx(user_id=user_id)
            update_userx(user_id, balance=get_amount)
            await message.answer("<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b> "
                                 f"<a href='tg://user?id={get_user[1]}'>{get_user[3]}</a> "
                                 f"<b>–±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –±–∞–ª–∞–Ω—Å –Ω–∞</b> <code>{get_amount}—Ä—É–±</code>",
                                reply_markup= await check_user_out_func(message.from_user.id))
            await message.answer(search_user_profile(user_id), reply_markup=search_profile_func(user_id))
            await state.finish()
        else:
            await message.answer("<b>‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –±–∞–ª–∞–Ω—Å–∞ 0—Ä—É–±</b>\n"
                                 "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
            await StorageFunctions.here_set_balance.set()
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
        await StorageFunctions.here_set_balance.set()


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="send_message", state="*")
async def send_user_message(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["here_cache_user_id"] = call.data.split(":")[1]
    await call.message.delete()
    await call.message.answer("<b>üíå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n"
                              "‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await StorageFunctions.here_send_message.set()


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(IsAdmin(), state=StorageFunctions.here_send_message)
async def input_send_user_message(message: types.Message, state: FSMContext):
    get_message = "<b>‚ùï –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n" + message.text
    async with state.proxy() as data:
        user_id = data["here_cache_user_id"]
    get_user = get_userx(user_id=user_id)
    await bot.send_message(user_id, get_message)
    await message.answer("<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b> "
                         f"<a href='tg://user?id={get_user[1]}'>{get_user[3]}</a> "
                         f"<b>–±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
                         f"{get_message}",
                        reply_markup= await check_user_out_func(message.from_user.id))
    await message.answer(search_user_profile(user_id), reply_markup=search_profile_func(user_id))
    await state.finish()

