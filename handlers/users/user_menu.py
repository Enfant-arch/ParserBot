# - *- coding: utf- 8 - *-
from aiogram import types
from aiogram.dispatcher import FSMContext
from data.config import curency, change_hwid_price
import aiohttp
import aiohttp
from admin_panel.panel.core import core
import asyncio
import re
from aiogram.types import CallbackQuery
from middlewares.throttling import rate_limit
from keyboards.default import check_user_out_func, all_back_to_main_default
from keyboards.inline import *
from keyboards.inline.parsing import parsing_InlineBoard
from keyboards.inline.inline_page import *
from loader import dp, bot
from states.state_users import *
from utils.other_func import clear_firstname, get_dates


# –†–∞–∑–±–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–ª–µ—Ç–∞–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç –¢–ì
def split_messages(get_list, count):
    return [get_list[i:i + count] for i in range(0, len(get_list), count)]


dp.callback_query_handler(lambda x: x.data == "parser:back", state="*")
@rate_limit(2)
@dp.message_handler(text="ü§ñ –ü–∞—Ä—Å–∏–Ω–≥", state="*")
async def show_search(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_photo( chat_id=message.from_user.id,
        photo="https://berikod.ru/storage/images/blog/5084d11bbc53b92cd741629a97603fc1_700x350.png", 
        caption="–ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–∞–º —Ç–æ–≤–∞—Ä—ã —Å —Ö–æ—Ä–æ—à–∏–º –∫–µ—à–±–µ–∫–æ–º\n<b>üëá –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç :</b>", reply_markup=parsing_InlineBoard)
        


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.callback_query_handler(lambda x: x.data == "back_profile")
@rate_limit(2)
@dp.message_handler(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", state="*")
async def show_profile(message: types.Message, state: FSMContext):
    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id )
    except Exception:
        pass
    await state.finish()
    await bot.send_message(chat_id=message.from_user.id, text=get_user_profile(message.from_user.id), reply_markup=open_profile_inl)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "FAQ"
@dp.message_handler(text="‚Ñπ FAQ", state="*")
@rate_limit(2)
async def show_my_deals(message: types.Message, state: FSMContext):
    await state.finish()
    get_settings = get_settingsx()
    send_msg = get_settings[1]
    if "{username}" in send_msg:
        send_msg = send_msg.replace("{username}", f"<b>{message.from_user.username}</b>")
    if "{user_id}" in send_msg:
        send_msg = send_msg.replace("{user_id}", f"<b>{message.from_user.id}</b>")
    if "{firstname}" in send_msg:
        send_msg = send_msg.replace("{firstname}", f"<b>{clear_firstname(message.from_user.first_name)}</b>")
    fqboard = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text="–ß–∏—Ç–∞—Ç—å", url=send_msg))
    await message.answer("FAQ", disable_web_page_preview=False, reply_markup=fqboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.message_handler(text="ü¶∏ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", state="*")
@rate_limit(2)
async def show_contact(message: types.Message, state: FSMContext):
    await state.finish()
    get_settings = get_settingsx()
    await message.answer(get_settings[0], disable_web_page_preview=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ "–ø–æ–∫—É–ø–∫–∏"
@dp.callback_query_handler(text="my_buy", state="*")
@rate_limit(2)
async def show_referral(call: CallbackQuery, state: FSMContext):
    last_purchases = last_purchasesx(call.from_user.id)
    if len(last_purchases) >= 1:
        await call.message.delete()
        count_split = 0
        save_purchases = []
        for purchases in last_purchases:
            save_purchases.append(f"<b>üìÉ –ß–µ–∫:</b> <code>#{purchases[4]}</code>\n"
                                  f"‚ñ∂ {purchases[9]} | {purchases[5]}—à—Ç | {purchases[6]} {curency}\n"
                                  f"üïú {purchases[13]}\n"
                                  f"<code>{purchases[10]}</code>")
        await call.message.answer("<b>üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫</b>\n"
                                  "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
        save_purchases.reverse()
        len_purchases = len(save_purchases)
        if len_purchases > 4:
            count_split = round(len_purchases / 4)
            count_split = len_purchases // count_split
        if count_split > 1:
            get_message = split_messages(save_purchases, count_split)
            for msg in get_message:
                send_message = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n".join(msg)
                await call.message.answer(send_message)
        else:
            send_message = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n".join(save_purchases)
            await call.message.answer(send_message)

        await call.message.answer(get_user_profile(call.from_user.id), reply_markup=open_profile_inl)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏")
    

@dp.callback_query_handler(text="change_hwid")
@rate_limit(2)
async def change_hwid_licence(call: CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(chat_id=call.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏:")
    await StorageChangeHWID.recipt.set()

#Search LICENCE
@dp.message_handler(state=StorageChangeHWID.recipt)
@rate_limit(2)
async def take_number_licence(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["receipt"] = message.text
    last_purchases = take_more_licence(receipt=message.text, user_id=message.from_user.id)
    if len(last_purchases) == 0 :
        await state.finish()
        await message.answer(text="‚ùó –¢–∞–∫–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ—Ç ‚ùó \n", reply_markup=open_profile_inl)
    else:
        last_purchases = last_purchases[0]
        if len(last_purchases) >= 1:
            time_stamp = (float(last_purchases[2]) + datetime.datetime.timestamp(datetime.datetime.strptime(last_purchases[16], '%Y-%m-%d %H:%M:%S'))) - datetime.datetime.timestamp(datetime.datetime.now())
            expire = (datetime.datetime.utcfromtimestamp(time_stamp).strftime('%d–¥ %H—á %M–º'))
            if time_stamp <= 0:
                text  = ("‚ùó –õ–∏—Ü–µ–Ω–∑–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å \n")
                await message.answer(text=text, reply_markup=open_profile_inl)
            else:
                if last_purchases[3] == 0:
                    text  = ("‚ùó –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–∞–π–¥–µ–Ω–∞\n"
                        f'<b>üÜî HWID:</b> <span class="tg-spoiler">{last_purchases[1]}</span>\n'
                        f"<b>üïú –û—Å—Ç–∞–ª–æ—Å—å:</b><code>{expire}</code>\n"
                        f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π HWID –¥–ª—è —Å–º–µ–Ω—ã:\n")
                else:
                    text  = ("‚ùó –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–∞–π–¥–µ–Ω–∞\n"
                        f'<b>üÜî HWID:</b> <span class="tg-spoiler">{last_purchases[1]}</span>\n'
                        f"<b>üïú –û—Å—Ç–∞–ª–æ—Å—å:</b><code>{expire}</code>\n"
                        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–º–µ–Ω—ã: </b> <code>{change_hwid_price} {curency}</code>\n"
                        f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π HWID –¥–ª—è —Å–º–µ–Ω—ã:\n")
                    await message.answer(text=text) 
                async with state.proxy() as data: 
                    data["old_hwid"] = last_purchases[1]
                    data["product"] = last_purchases[11]
                
            await StorageChangeHWID.new_hwid.set()
        
        
        else:
            await message.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏")
            await message.answer(get_user_profile(message.from_user.id), reply_markup=open_profile_inl)

@dp.callback_query_handler(text="confirm", state=StorageChangeHWID.confirm)
async def confirmation_change_hwid(call: CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    async with state.proxy() as data:
        old = data["old_hwid"]
        new = data["new_hwid"]
        receipt = data["receipt"]
        price = data["price"] 
        link = get_positionsx("*", position_type=2)
        balance = get_userx(user_id = call.from_user.id)[4]

        if balance < price:
             await bot.send_message(chat_id=call.from_user.id, text=f"–û—à–∏–±–∫–∞, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=check_user_out_func(call.from_user.id))

        else:
            if link[0] != None:
                link = link[0][13].replace("___", new, 1)
                link = link.replace("___", old, 1)
                result = await auth_licence(link)
                
                if result is True:
                    update_licencex(receipt=receipt, HWID=new)
                    update_licencex(receipt=receipt, change_times=1)
                    update_userx(user_id=call.from_user.id, balance = balance - price)
                    await bot.send_message(chat_id=call.from_user.id, text=f"Hwid –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=check_user_out_func(call.from_user.id))
                else:
                    await bot.send_message(chat_id=call.from_user.id, text=f"<b>–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏</b>üò∞\n–ú—ã —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É", reply_markup=check_user_out_func(call.from_user.id))

            else:
                await bot.send_message(chat_id=call.from_user.id, text=f"–û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        await state.finish()

@dp.callback_query_handler(text="cancel", state=StorageChangeHWID.confirm)
async def confirmation_change_hwid(call: CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(chat_id=call.from_user.id, text="–î–æ–¥–µ–ª—ã–≤–∞—é")
    await state.finish()




@dp.message_handler(state=StorageChangeHWID.new_hwid)
async def take_newHWID_licence(message: types.Message, state: FSMContext):
    new_HWID = message.text
    async with state.proxy() as data:
        receipt =  data["receipt"]
        data["new_hwid"] = message.text
    last_purchases = take_more_licence(receipt=receipt, user_id=message.from_user.id)[0]
    if last_purchases[3] != 0:
        get_user = get_userx(user_id=message.from_user.id)
        if int(get_user[4]) > change_hwid_price:
            text  = ("‚ùó–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö‚ùó\n"
                    f'<b> –°—Ç–∞—Ä—ã–π HWID:</b> <code>{last_purchases[1]}</code>\n'
                    f"<b> –ù–æ–≤—ã–π HWID</b><code>{new_HWID}</code>\n"
                    f"<b >–¶–µ–Ω–∞ : {change_hwid_price} {curency}</b>")
            
            async with state.proxy() as data:
                data["price"] = change_hwid_price
               
            
            await message.answer(text, reply_markup=confirmation)
            
        else:
            await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")

    else:
        text = ("‚ùó–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö‚ùó\n"
                    f'<b>–°—Ç–∞—Ä—ã–π HWID:</b> <code>{last_purchases[1]}</code>\n'
                    f"<b>–ù–æ–≤—ã–π HWID</b><code>{new_HWID}</code>\n"
                    f"<b>–¶–µ–Ω–∞ : 0\n–°–ª–µ–¥—É—é—â–∞—è —Å–º–µ–Ω–∞ HWID : {change_hwid_price}—Ä</b>")
        async with state.proxy() as data:
            data["price"] = 0
        await message.answer(text, reply_markup=confirmation)
    
    await StorageChangeHWID.confirm.set()



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ "1–ø–æ–∫—É–ø–∫–∏"
@dp.callback_query_handler(text="my_licence", state="*")
async def show_referral(call: CallbackQuery, state: FSMContext):
    last_purchases = last_licencex(call.from_user.id)
    if len(last_purchases) >= 1:
        
        await call.message.delete()
        count_split = 0
        save_purchases = []
        
        for purchases in last_purchases:
            unix_day_out = int(int(purchases[17]) + int(purchases[2]))
            #day_out = datetime.datetime.strptime('%Y-%m-%d %H:%M:%S', datetime.datetime.utcfromtimestamp(unix_day_out))
            day_out = (datetime.datetime.utcfromtimestamp(unix_day_out).strftime('%Y-%m-%d %H:%M'))
            lost_time = unix_day_out - datetime.datetime.timestamp(datetime.datetime.now())

            if lost_time < 0:
                expire = "0 –¥–Ω–µ–π"
            else:
                expire = (datetime.datetime.utcfromtimestamp(lost_time).strftime('%d–¥ %H—á %M–º'))

            save_purchases.append(f"<b>‚Ñπ –ù–æ–º–µ—Ä –õ–∏—Ü–µ–Ω–∑–∏–∏:</b> <code>{purchases[7]}</code>\n"
                                  f'<b>ü™™ HWID:</b> <span class="tg-spoiler">{purchases[1]}</span>\n'
                                  f"<b>üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b><code>{day_out}</code>\n"
                                  f"<b>üïú –û—Å—Ç–∞–ª–æ—Å—å:</b><code>{expire}</code>\n"
                                  f"<b>üå©  –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–∞ :</b> <code>{purchases[13]}</code>\n"
                                  f"<b>üí¥  –¶–µ–Ω–∞ :</b> <code> {purchases[10]} {curency}</code>")
        await call.message.answer("<b>‚öôÔ∏è –í–∞—à–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ :</b>\n"
                                  "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
        save_purchases.reverse()
        len_purchases = len(save_purchases)
        logging.info(len_purchases)
        if len_purchases > 4:
            count_split = round(len_purchases / 4)
            count_split = len_purchases // count_split
        if count_split > 1:
            get_message = split_messages(save_purchases, count_split)
            for msg in get_message:
                send_message = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n".join(msg)
                await call.message.answer(send_message)
        else:
            send_message = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n".join(save_purchases)
            await call.message.answer(send_message)
        
        await call.message.answer("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ", reply_markup=chages_licence)

        
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏")
        await call.message.answer(get_user_profile(call.from_user.id), reply_markup=open_profile_inl)


################################################################################################
######################################### –ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–ê #######################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_open_category", state="*")
async def open_category_for_buy_item(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    get_category = get_categoryx("*", category_id=category_id)
    get_positions = get_positionsx("*", category_id=category_id)

    get_kb = buy_item_item_position_ap(0, category_id)
    if len(get_positions) >= 1:
        await call.message.edit_text("<b>üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä üì¶:</b>",
                                     reply_markup=get_kb)
    else:
        await call.answer(f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category[2]} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")


# –í–µ—Ä–Ω—É—Ç—Å—å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="back_buy_item_to_category", state="*")
async def back_category_for_buy_item(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("<b>üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä üì¶:</b>",
                                 reply_markup=buy_item_open_category_ap(0))


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="buy_category_nextp", state="*")
async def buy_item_next_page_category(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=buy_item_next_page_category_ap(remover))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="buy_category_prevp", state="*")
async def buy_item_prev_page_category(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=buy_item_previous_page_category_ap(remover))


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="buy_position_nextp", state="*")
async def buy_item_next_page_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=item_buy_next_page_position_ap(remover, category_id))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="buy_position_prevp", state="*")
async def buy_item_prev_page_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=item_buy_previous_page_position_ap(remover, category_id))


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="back_buy_item_position", state="*")
async def buy_item_next_page_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.delete()
    await call.message.answer("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                              reply_markup=buy_item_item_position_ap(remover, category_id))


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_open_position", state="*")
async def open_category_for_create_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])

    

    get_position = get_positionx("*", position_id=position_id)
    get_category = get_categoryx("*", category_id=category_id)
    get_items = get_itemsx("*", position_id=position_id)
    
    if (get_position[3] == 2 ):
        send_msg = f"<b>üéÅ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞:</b>\n" \
               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
               f"<b>üìú –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> <code>{get_category[2]}</code>\n" \
               f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{get_position[2]}</code>\n" \
               f"<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n\t<code>{get_position[5]}  {curency}/–¥–µ–Ω—å</code>\n\t<code>{get_position[6]}  {curency}/–Ω–µ–¥–µ–ª—è</code>\n\t<code>{get_position[7]}  {curency}/–º–µ—Å—è—Ü</code>\n" \
               f"<b>üìú –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n" \
               f"{get_position[8]}\n"
        if len(get_position[9]) >= 5:
            await call.message.delete()
            await call.message.answer_photo(get_position[9],
                                            send_msg,
                                            reply_markup=open_item_func(position_id, remover, category_id))
        else:
            await call.message.edit_text(send_msg,
                                        reply_markup=open_item_func(position_id, remover, category_id))
    else:
        send_msg = f"<b>üéÅ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞:</b>\n" \
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                f"<b>üìú –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> <code>{get_category[2]}</code>\n" \
                f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{get_position[2]}</code>\n" \
                f"<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{get_position[4]} {curency}</code>\n" \
                f"<b>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> <code>{get_items}—à—Ç</code>\n" \
                f"<b>üìú –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n" \
                f"{get_position[8]}\n"
        if len(get_position[9]) >= 5:
            await call.message.delete()
            await call.message.answer_photo(get_position[9],
                                            send_msg,
                                            reply_markup=open_item_func(position_id, remover, category_id))
        else:
            await call.message.edit_text(send_msg,
                                        reply_markup=open_item_func(position_id, remover, category_id))


# –í—ã–±–æ—Ä –∫–æ–ª-–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_this_item", state="*")
async def open_category_for_create_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    async with state.proxy() as data:
        data["pos_id"] = position_id
    get_items = get_itemsx("*", position_id=position_id)
    get_position = get_positionx("*", position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)
    if get_position[3] != 2:
        if len(get_items) >= 1:
            if int(get_user[4]) >= int(get_position[3]):
                async with state.proxy() as data:
                    data["here_cache_position_id"] = position_id
                await call.message.delete()
                await StorageUsers.here_input_count_buy_item.set()
                await call.message.answer(f"üì¶ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>\n"
                                        f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{len(get_items)}</code>\n"
                                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[3]} {curency}</code>\n"
                                        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user[4]} {curency}</code>\n",
                                        reply_markup=all_back_to_main_default)
            else:
                await call.answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")
        else:
            await call.answer("üéÅ –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")
    else : 
        async with state.proxy() as data:
            data["here_cache_position_id"] = position_id
        await call.message.delete()
        await StorageUsers.here_input_timeUsing_product.set()
        buy_btns =  InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f"–î–µ–Ω—å - {get_position[5]} {curency} ", callback_data="pay_for_day")).add(InlineKeyboardButton(text=f"üî• –ù–µ–¥–µ–ª—è - {get_position[6]} {curency}", callback_data="pay_for_week")).add(InlineKeyboardButton(text=f"‚ù§Ô∏è‚Äçüî• –ú–µ—Å—è—Ü - {get_position[7]} {curency}", callback_data="pay_for_month"))

        await call.message.answer(f"‚è≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–º—è –ø–æ–¥–ø–∏—Å–∫–∏ </b>\n"
                                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                        f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{get_position[2]}</code>\n" \
                        f"<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n\t<code>{get_position[5]}  {curency}/–¥–µ–Ω—å</code>\n\t<code>{get_position[6]}  {curency}/–Ω–µ–¥–µ–ª—è</code>\n\t<code>{get_position[7]}  {curency}/–º–µ—Å—è—Ü</code>\n" \
                        f"<b>üìú –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n", reply_markup=buy_btns)
    

### –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
# 1 DAY
@dp.callback_query_handler(lambda x: x.data =="pay_for_day", state=StorageUsers.here_input_timeUsing_product)
async def select_day_subscribe(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        position_id = data["pos_id"]
        data["expire"] = 86400

    get_items = get_itemsx("*", position_id=position_id)
    get_position = get_positionx("*", position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)
    
    if int(get_user[4]) >= int(get_position[5]):
        async with state.proxy() as data:
            data["here_cache_position_id"] = position_id
            data["to_pay"] =get_position[5]
        await call.message.delete()
        await StorageUsers.here_input_your_HWID.set()
        await call.message.answer(f"üì¶ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à HWID</b>\n"
                                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[5]} {curency}</code>\n"
                                        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user[4]} {curency}</code>\n",
                                reply_markup=all_back_to_main_default)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")
    
# 1 WEEK
@dp.callback_query_handler(lambda x: x.data =="pay_for_week", state=StorageUsers.here_input_timeUsing_product)
async def select_week_subscribe(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        position_id = data["pos_id"]
        data["expire"] = 604800
    get_items = get_itemsx("*", position_id=position_id)
    get_position = get_positionx("*", position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)
    if int(get_user[4]) >= int(get_position[6]):
        async with state.proxy() as data:
            data["here_cache_position_id"] = position_id
            data["to_pay"] =get_position[6]
        await call.message.delete()
        await StorageUsers.here_input_your_HWID.set()
        await call.message.answer(f"üì¶ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à HWID</b>\n"
                                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[6]} {curency}</code>\n"
                                        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user[4]} {curency}</code>\n",
                                reply_markup=all_back_to_main_default)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")

#1 MONTH
@dp.callback_query_handler(lambda x: x.data =="pay_for_month", state=StorageUsers.here_input_timeUsing_product)
async def select_month_subscribe(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        position_id = data["pos_id"]
        data["expire"] = 2629743
    get_items = get_itemsx("*", position_id=position_id)
    get_position = get_positionx("*", position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)
    if int(get_user[4]) >= int(get_position[7]):
        async with state.proxy() as data:
            data["here_cache_position_id"] = position_id
            data["to_pay"] =get_position[7]
        await call.message.delete()
        await StorageUsers.here_input_your_HWID.set()
        await call.message.answer(f"üì¶ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à HWID</b>\n"
                                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[7]} {curency}</code>\n"
                                        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user[4]} {curency}</code>\n",
                                reply_markup=all_back_to_main_default)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")
   



@dp.message_handler(state=StorageUsers.here_input_your_HWID)
async def input_hwid(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data["here_cache_position_id"]
        to_pay = data["to_pay"]
        time = data["expire"]
    get_items = get_itemsx("*", position_id=position_id)
    get_position = get_positionx("*", position_id=position_id)
    get_user = get_userx(user_id=message.from_user.id)    
    hwid = str(message.text)
    amount_pay = float(to_pay)      
    if float(get_user[4]) >= amount_pay:
        await state.finish()
        
        delete_msg = await message.answer("<b>üéÅ –¢–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.</b>",
                                       reply_markup= await check_user_out_func(message.from_user.id))
        await message.answer(text=f"<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                            f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –ª–∏ –≤–∞—à HWID: <b> {hwid} </b>\n"
                            f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{to_pay} {curency}</code>\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                            f"üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{amount_pay} {curency}</code>", 
                            reply_markup=confirm_buy_Licence(position_id=position_id, HWID=hwid, time=time,
                                                            message_id=delete_msg.message_id, price=to_pay))

    else:
        await message.answer(f"<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.</b>\n"
                            f"<b>üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>\n"
                            f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{len(get_items)}</code>\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                            f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user[4]}</code>\n"
                            f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[3]} {curency}</code>\n",
                            reply_markup=all_back_to_main_default)
               



# –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–ª-–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏

@dp.message_handler(state=StorageUsers.here_input_count_buy_item)
async def input_buy_count_item(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data["here_cache_position_id"]
    get_items = get_itemsx("*", position_id=position_id)
    get_position = get_positionx("*", position_id=position_id)
    get_user = get_userx(user_id=message.from_user.id)

    if message.text.isdigit():
        get_count = int(message.text)
        amount_pay = int(get_position[3]) * get_count
        if len(get_items) >= 1:
            if 1 <= get_count <= len(get_items):
                if int(get_user[4]) >= amount_pay:
                    await state.finish()
                    delete_msg = await message.answer("<b>üéÅ –¢–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.</b>",
                                                     reply_markup= await check_user_out_func(message.from_user.id))

                    await message.answer(f"<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>\n"
                                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                         f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                         f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[3]} {curency}</code>\n"
                                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                         f"‚ñ∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{get_count}—à—Ç</code>\n"
                                         f"üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{amount_pay} {curency}</code>",
                                         reply_markup=confirm_buy_items(position_id, get_count,
                                                                        delete_msg.message_id))
                else:
                    await message.answer(f"<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.</b>\n"
                                         f"<b>üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>\n"
                                         f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{len(get_items)}</code>\n"
                                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                         f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user[4]}</code>\n"
                                         f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                         f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[3]} {curency}</code>\n",
                                         reply_markup=all_back_to_main_default)
            else:
                await message.answer(f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.</b>\n"
                                     f"<b>üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>\n"
                                     f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{len(get_items)}</code>\n"
                                     f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                     f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user[4]}</code>\n"
                                     f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                     f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[3]} {curency}</code>\n",
                                     reply_markup=all_back_to_main_default)
        else:
            await state.finish()
            await message.answer("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è</b>",
                                reply_markup= await check_user_out_func(message.from_user.id))
    else:
        await message.answer(f"<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             f"<b>üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>\n"
                             f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{len(get_items)}</code>\n"
                             f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                             f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user[4]}</code>\n"
                             f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                             f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[3]} {curency}</code>\n",
                             reply_markup=all_back_to_main_default)


# –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="not_buy_items", state="*")
async def not_buy_this_item(call: CallbackQuery, state: FSMContext):
    message_id = call.data.split(":")[1]
    await call.message.delete()
    await bot.delete_message(call.message.chat.id, message_id)
    await call.message.answer("<b>‚òë –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–æ–≤.</b>",
                              reply_markup=check_user_out_func(call.from_user.id))


# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="xbuy_item:", state="*")
async def yes_buy_this_item(call: CallbackQuery, state: FSMContext):
    get_settings = get_settingsx()
    delete_msg = await call.message.answer("<b>üîÑ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è</b>")
    position_id = int(call.data.split(":")[1])
    get_count = int(call.data.split(":")[2])
    message_id = int(call.data.split(":")[3])

    await bot.delete_message(call.message.chat.id, message_id)
    await call.message.delete()

    get_items = get_itemsx("*", position_id=position_id)
    get_position = get_positionx("*", position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)
    amount_pay = int(get_position[3]) * get_count

    if 1 <= int(get_count) <= len(get_items):
        if int(get_user[4]) >= amount_pay:
            save_items, send_count, split_len = buy_itemx(get_items, get_count)

            if split_len <= 50:
                split_len = 70
            elif split_len <= 100:
                split_len = 50
            elif split_len <= 150:
                split_len = 30
            elif split_len <= 200:
                split_len = 10
            else:
                split_len = 3

            if get_count != send_count:
                amount_pay = int(get_position[3]) * send_count
                get_count = send_count

            random_number = [random.randint(100000000, 999999999)]
            passwd = list("ABCDEFGHIGKLMNOPQRSTUVYXWZ")
            random.shuffle(passwd)
            random_char = "".join([random.choice(passwd) for x in range(1)])
            receipt = random_char + str(random_number[0])
            buy_time = get_dates()

            await bot.delete_message(call.from_user.id, delete_msg.message_id)

            if len(save_items) <= split_len:
                send_message = "\n".join(save_items)
                await call.message.answer(f"<b>üéÅ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:</b>\n"
                                          f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                          f"{send_message}")
            else:
                await call.message.answer(f"<b>üéÅ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:</b>\n"
                                          f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")

                save_split_items = split_messages(save_items, split_len)
                for item in save_split_items:
                    send_message = "\n".join(item)
                    await call.message.answer(send_message)
            save_items = "\n".join(save_items)

            add_purchasex(call.from_user.id, call.from_user.username, call.from_user.first_name,
                          receipt, get_count, amount_pay, get_position[3], get_position[1], get_position[2],
                          save_items, get_user[4], int(get_user[4]) - amount_pay, buy_time, int(time.time()))
            update_userx(call.from_user.id, balance=get_user[4] - amount_pay)
            await call.message.answer(f"<b>üéÅ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä(—ã) ‚úÖ</b>\n"
                                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                      f"üìÉ –ß–µ–∫: <code>#{receipt}</code>\n"
                                      f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                      f"üì¶ –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{get_count}</code>\n"
                                      f"üíµ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: <code>{amount_pay} {curency}</code>\n"
                                      f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <a href='tg://user?id={get_user[1]}'>{get_user[3]}</a> <code>({get_user[1]})</code>\n"
                                      f"üïú –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{buy_time}</code>",
                                      reply_markup=check_user_out_func(call.from_user.id))
        else:
            await call.message.answer("<b>‚ùó –ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>")
    else:
        await state.finish()
        await call.message.answer("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.</b>",
                                  check_user_out_func(call.from_user.id))
    

# –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="not_buy_licence", state="*")
async def not_buy_this_item(call: CallbackQuery, state: FSMContext):
    message_id = call.data.split(":")[1]
    await call.message.delete()
    await bot.delete_message(call.message.chat.id, message_id)
    await call.message.answer("<b>‚òë –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É –ª–∏—Ü–µ–Ω–∑–∏–∏</b>",
                              reply_markup=check_user_out_func(call.from_user.id))


# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="x:", state="*")
async def yes_buy_this_item(call: CallbackQuery, state: FSMContext):
    get_settings = get_settingsx()
    delete_msg = await call.message.answer("<b>üîÑ –ñ–¥–∏—Ç–µ, –ª–∏—Ü–µ–Ω–∑–∏—è –≤—ã–¥–∞–µ—Ç—Å—è...</b>")
    position_id = int(call.data.split(":")[1])
    HWID = str(call.data.split(":")[2])
    message_id = call.data.split(":")[3]
    timer = call.data.split(":")[4]
    amount_pay = call.data.split(":")[5]

    await bot.delete_message(call.message.chat.id, message_id)
    await call.message.delete()
    expire = "0d"
    match int(timer):
        case 86400:
            expire = "1d"
        case 604800:
            expire = "7d"
        case 2629743:
            expire = "30d"

    get_position = get_positionx("*", position_id=position_id)
    addres_for_get = get_positionx("base_path", position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)
    

    if int(get_user[4]) >= int(amount_pay):
       
        random_number = [random.randint(100000000, 999999999)]
        passwd = list("ABCDEFGHIGKLMNOPQRSTUVYXWZ")
        random.shuffle(passwd)
        random_char = "".join([random.choice(passwd) for x in range(1)])
        receipt = random_char + str(random_number[0])
        buy_time = get_dates()

        await bot.delete_message(call.from_user.id, delete_msg.message_id)
       
        x = addres_for_get[0].replace("___", str(expire), 1)
        x = x.replace("___", HWID, 1) 


       
        

        expire = datetime.datetime.utcfromtimestamp(datetime.datetime.timestamp(datetime.datetime.now()) + float(timer)).strftime('%d-%m-%Y %H:%M:%S')

        licence_added = await auth_licence(x)
        if licence_added is True:
            await call.message.answer(f"<b>üéÅ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é ‚úÖ</b>\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                    f"üìÉ –ß–µ–∫: <code>#{receipt}</code>\n"
                                    f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                    f"üì¶ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è : <code>{expire}</code>\n"
                                    f"üíµ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: <code>{amount_pay} {curency}</code>\n"
                                    f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <a href='tg://user?id={get_user[1]}'>{get_user[3]}</a> <code>({get_user[1]})</code>\n"
                                    f"üïú –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{buy_time}</code>",
                                    reply_markup=check_user_out_func(call.from_user.id))
            add_purchasex(user_id=call.from_user.id,user_login=call.from_user.username, user_name=call.from_user.first_name,
                        receipt=receipt, item_count=1, item_price=amount_pay, item_price_one_item=amount_pay, item_position_id=get_position[3], item_position_name=get_position[1], item_buy=get_position[2],
                        balance_before=get_user[4], balance_after=float(get_user[4]) - float(amount_pay), buy_date=buy_time, buy_date_unix=int(time.time()))
        
            add_licence(HWID, timer, call.from_user.id, call.from_user.username, call.from_user.first_name,
                        receipt, 1, amount_pay, amount_pay, get_position[3], get_position[1], get_position[2],
                        get_user[4], float(get_user[4]) - float(amount_pay), buy_time, int(time.time()))
        
            update_userx(call.from_user.id, balance=float(get_user[4]) - float(amount_pay))
        else:
            await bot.send_message(chat_id=call.from_user.id, text=f"<b>–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏</b>üò∞\n–ú—ã —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É", reply_markup=check_user_out_func(call.from_user.id))
    else:
        await call.message.answer("<b>‚ùó –ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>")


async def auth_licence(link):
    async with aiohttp.ClientSession() as session:
        core.logger.make_log(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–¥–∞—á–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ : {link}")
        async with session.get(f'{link}') as response:
            body = await response.json()
            if response.status == 200:
                return True
            else:
                await bot.send_message(chat_id=core.main_admin,
                                                  text=f"<b>üü•üü•üü• –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {link} </code></b>\n\n",
                                                  disable_web_page_preview=True) 
                return False

async def is_url(string):
    pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')
    return re.search(pattern, string) is not None