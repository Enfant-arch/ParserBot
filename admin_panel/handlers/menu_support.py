from aiogram.dispatcher import FSMContext
import admin_panel.keyboard as kb
from admin_panel.entities.admin import Admin
from admin_panel.panel.core import core
from aiogram.types import CallbackQuery, Message, ContentTypes
from admin_panel.filters import IsAdmin, CallEqual, CallStart
import admin_panel.state as st
from admin_panel.entities.support_message import SupportMessage


@core.dp.callback_query_handler(CallEqual("menu_support"), IsAdmin())
async def menu_support(call: CallbackQuery):
    await call.message.edit_text(f"<b>üÜî –í–∞—à id: <code>{call.from_user.id}</code></b>\n\n"
                                 f"<b>üë®üèº‚Äçüíª –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö</b>",
                                 reply_markup=kb.menu_support(len(SupportMessage.messages())))


@core.dp.callback_query_handler(CallEqual("refresh_support_messages"), IsAdmin())
async def refresh_support_messages(call: CallbackQuery):
    try:
        await call.message.edit_text(f"<b>üÜî –í–∞—à id: <code>{call.from_user.id}</code></b>\n\n"
                                     f"<b>üë®üèº‚Äçüíª –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö</b>",
                                     reply_markup=kb.menu_support(len(SupportMessage.messages())))
    except:
        await call.answer("‚ö† –í—Å—ë –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ –∏–∑–º–µ–Ω–Ω–æ!")


@core.dp.message_handler(commands=["support"])
async def support(message: Message):
    await message.answer("<b>‚óæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
                         "<i>‚ö† –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</i>\n\n"
                         "<i>‚ö† –§–ª—É–¥, —Å–ø–∞–º, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ —Ä–µ–∫–ª–∞–º–∞ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É = –±–∞–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ!</i>\n\n")
    await st.Support.send_to.set()


@core.dp.message_handler(state=st.Support.send_to)
async def support(message: Message, state: FSMContext):
    if len(message.text) > 100:
        message1 = SupportMessage.create(message.from_user, message.text)
        
        message2 = await message.bot.send_message(chat_id=core.main_admin,
                                                  text=f"<b>üë§ –ê–≤—Ç–æ—Ä: <code>@{message.from_user.username}</code></b>\n\n"
                                                       f"<b><a href='https://t.me/{message.from_user.username}'>üë§ –ê–≤—Ç–æ—Ä: id{message.from_user.id}</a></b>\n\n"
                                                       f"<b>‚óæ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: </b>"
                                                       f"<i>{message.text}</i>",
                                                  reply_markup=kb.message_menu(message1.id, message1.from_user.id),
                                                  disable_web_page_preview=True)
        for admin_id in Admin.admins():
            try:
                await message2.copy_to(admin_id)
            except:
                pass
        await message.answer("<b>‚úÖ –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—É—á–∏–ª–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!</b>")
        core.logger.make_log(f"User id{core.main_admin} has sent message to support")
    else :
        await message.answer("<b>‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n–ú—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã —Å–ø–æ—Å–æ–±–Ω—ã –¥–æ—Å—Ç–æ–π–Ω–æ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∑–∞ —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤</b>")
        core.logger.make_log(f"User id {core.main_admin} tried sended message to support")
    await state.finish()
    
        


@core.dp.callback_query_handler(CallStart("delete_support_message_"), IsAdmin())
async def delete_support_message(call: CallbackQuery):
    await call.message.edit_reply_markup(None)
    try:
        message = SupportMessage(call.data.replace("delete_support_message_", ""))
        message1 = await call.bot.send_message(chat_id=message.from_user.id,
                                               text=f"<b>üìÜ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ <code>{message.sending_date}</code></b>\n\n"
                                                    f"<b>‚óæ –ï–≥–æ —Ç–µ–∫—Å—Ç: </b>"
                                                    f"<i>{message.text}</i>")
        await message1.reply("<b>üò© –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–ª–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞!</b>")
        SupportMessage.delete(message.id)
    except:
        await call.message.delete()


@core.dp.callback_query_handler(CallStart("answer_support_message_"), IsAdmin())
async def answer_support_message_(call: CallbackQuery):
    try:
        await call.message.answer("<b>‚óæ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>")
        await st.Support.send_from.set()
    except:
        await call.message.delete()


@core.dp.message_handler(state=st.Support.send_from)
async def send_from(message: Message):
    if message.reply_to_message and message.text:
        chat_id = None
        message_id = None
        message.reply_to_message
        for row in message.reply_to_message.reply_markup.inline_keyboard:
            for button in row:
                if button.text == "üó£ –û—Ç–≤–µ—Ç–∏—Ç—å":
                    chat_id = button.callback_data.replace("answer_support_message_", "")
                if button.text == "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ":
                    message_id = button.callback_data.replace("delete_support_message_", "")
        if chat_id:
            message1 = SupportMessage(message_id)
            message2 = await message.bot.send_message(chat_id=chat_id,
                                                      text=f"<b>üìÜ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ <code>{message1.sending_date}</code></b>\n\n"
                                                           f"<b>‚óæ –ï–≥–æ —Ç–µ–∫—Å—Ç: </b>"
                                                           f"<i>{message1.text}</i>")
            await message2.reply(text="<b>üë§ –û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>"
                                      f"<i>{message.text}</ind_fr>")
            core.logger.make_log(f"Message has been successfully sent to id{message1.from_user.id}", initiator=message.from_user.id)
            SupportMessage.delete(message1.id)
        else:
            await message.answer(
                "<b>‚óæ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å</b>")
    else:
        await message.answer(
            "<b>‚óæ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å</b>")


@core.dp.callback_query_handler(CallEqual("unlock_support_messages"), IsAdmin())
async def unlock_support_messages(call: CallbackQuery):
    await call.message.edit_reply_markup(kb.menu_support(len(SupportMessage.messages()), locked=False))


@core.dp.callback_query_handler(CallEqual("lock_support_messages"), IsAdmin())
async def lock_support_messages(call: CallbackQuery):
    await call.message.edit_reply_markup(kb.menu_support(len(SupportMessage.messages())))


@core.dp.callback_query_handler(CallEqual("locked"), IsAdmin())
async def locked(call: CallbackQuery):
    await call.answer("‚ö† –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ!")


@core.dp.callback_query_handler(CallEqual("clean_menu_support"), IsAdmin())
async def clean_menu_support(call: CallbackQuery):
    await call.answer("üïê –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—á–∞–ª–∞—Å—å, –æ–∂–∏–¥–∞–π—Ç–µ...")
    SupportMessage.clean()
    await call.answer("‚úÖ –û—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
    await call.message.edit_reply_markup(kb.menu_support(len(SupportMessage.messages())))


@core.dp.callback_query_handler(CallEqual("get_support_messages"), IsAdmin())
async def get_support_messages(call: CallbackQuery):
    await call.message.edit_text(
        "<b>‚óæ –í–æ—Ç –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã, –ª–∏–±–æ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–∞</b>",
        reply_markup=kb.support_messages(SupportMessage.messages()))


@core.dp.callback_query_handler(CallStart("open_support_message_"), IsAdmin())
async def get_support_messages(call: CallbackQuery):
    try:
        message = SupportMessage(call.data.replace("open_support_message_", ""))
        await call.message.answer(text=f"<b>üë§ –ê–≤—Ç–æ—Ä: <code>@{message.from_user.username}</code></b>\n\n"
                                       f"<b><a href='https://t.me/{message.from_user.username}'>üë§ –ê–≤—Ç–æ—Ä: id{message.from_user.id}</a></b>\n\n"
                                       f"<b>‚óæ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: </b>"
                                       f"<i>{message.text}</i>",
                                  reply_markup=kb.message_menu(message.id, message.from_user.id),
                                  disable_web_page_preview=True)
    except:
        try:
            await call.message.edit_reply_markup(reply_markup=kb.support_messages(SupportMessage.messages()))
        except:
            await call.answer("‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")


@core.dp.callback_query_handler(CallStart("send_message_from_support"), IsAdmin())
async def send_message_from_support(call: CallbackQuery):
    await call.message.answer("<b>‚óæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É<code> id </code>—Ç–æ–≥–æ, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>")
    await st.Support.get_aim.set()


@core.dp.message_handler(state=st.Support.get_aim)
async def send_from(message: Message, state: FSMContext):
    try:
        await message.bot.get_chat(message.text)
        async with state.proxy() as data:
            data["user_id"] = int(message.text)
        await message.answer(f"<b>‚óæ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code> id{message.text}</code></b>\n\n")
        await st.Support.send_message.set()
    except:
        await message.answer("<b>‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π<code> id </code>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>")
        await state.finish()


@core.dp.message_handler(state=st.Support.send_message, content_types=ContentTypes.ANY)
async def send_from(message: Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            user_id = data["user_id"]
            message1 = await message.copy_to(chat_id=user_id)
            await message.bot.send_message(chat_id=user_id,
                                           reply_to_message_id=message1.message_id,
                                           text=f"<b>‚óæ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞ @{(await message.bot.get_me()).username}</b>\n\n"
                                                f"<i>‚ö† –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/support</code></i>")
            await message.reply(f"<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code> id{user_id}</code>!</b>")
            core.logger.make_log(f"Message has been successfully sent to id{user_id}", initiator=message.from_user.id)
    except:
        await message.answer("<b>‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!</b>")
    finally:
        await state.finish()
