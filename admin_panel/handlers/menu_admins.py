from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from admin_panel.panel.core import core
from admin_panel.filters import IsAdmin, CallEqual, CallStart
import admin_panel.keyboard as kb
from admin_panel.entities.admin import Admin, AdminExistsError, AdminLimitError
import admin_panel.state as st

@core.dp.callback_query_handler(CallEqual("menu_admins"), IsAdmin())
async def menu_admins(call: CallbackQuery):
    if call.from_user.id == core.main_admin:
        await call.message.edit_text(f"<b>üÜî –í–∞—à id:<code> {call.from_user.id}</code></b>\n\n"
                                     f"<b>‚óæ –í—ã –≤–ª–∞–¥–µ–ª–µ—Ü, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
                                     f"<b>‚óæ –õ–∏–º–∏—Ç –∞–¥–º–∏–Ω–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ<code> 5 (–Ω–µ –≤–∫–ª—é—á–∞—è –≤–∞—Å)</code></b>")
        await call.message.edit_reply_markup(kb.menu_admins([[i, "locked"] for i in Admin.admins()]))
    else:
        await call.answer("‚ö† –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü, —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")

@core.dp.callback_query_handler(CallEqual("add_admin"), IsAdmin())
async def add_admin(call: CallbackQuery):
    await call.answer("‚óæ –í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å", show_alert=True)
    await st.Admin.add.set()

@core.dp.message_handler(IsAdmin(), state=st.Admin.add)
async def add_admin(message: Message, state: FSMContext):
    try:
        admin_id = int(message.text)
        if admin_id == core.main_admin:
            raise AdminExistsError
        await core.dp.bot.get_chat(admin_id)
        Admin.add(admin_id=admin_id)
        await message.answer("<b>‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω!</b>\n\n"
                             f"<b>üÜî –ï–≥–æ id: <code>{admin_id}</code></b>\n\n"
                             f"<code>‚úÖ id{admin_id} </code><i>—É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–π!</i>")
        await core.dp.bot.send_message(chat_id=admin_id,
                                       text="<b>ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å <code>–∞–¥–º–∏–Ω</code>!</b>\n\n"
                                            "<i>üñ• –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/admin</code> –∏–ª–∏ <code>/–∞–¥–º–∏–Ω</code></i>")
        core.logger.make_log(f"User id{admin_id} has become admin", initiator=core.main_admin)
    except AdminLimitError:
        await message.answer("<b>‚ö† –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –Ω–µ –±—ã–ª!</b>\n\n"
                             "<i>ü§∑‚Äç‚ôÇ –ü—Ä–∏—á–∏–Ω–∞:</i><code> –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ 5/5</code>")
    except AdminExistsError:
        await message.answer("<b>‚ö† –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –Ω–µ –±—ã–ª!</b>\n\n"
                             "<i>ü§∑‚Äç‚ôÇ –ü—Ä–∏—á–∏–Ω–∞:</i><code> id —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤</code>")
    except Exception:
        await message.answer("<b>‚ö† –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –Ω–µ –±—ã–ª!</b>\n\n"
                             "<i>ü§∑‚Äç‚ôÇ –ü—Ä–∏—á–∏–Ω–∞:</i><code> –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id</code>")
    finally:
        await state.finish()
        await message.delete()

@core.dp.callback_query_handler(CallEqual("refresh_admin"), IsAdmin())
async def refresh_admin(call: CallbackQuery):
    try:
        await call.message.edit_reply_markup(kb.menu_admins([[i, "locked"] for i in Admin.admins()]))
    except Exception:
        await call.answer("‚ö† –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å!")

@core.dp.callback_query_handler(CallStart("unlock_delete_admin_"), IsAdmin())
async def unlock_delete_admin(call: CallbackQuery):
    admins = []
    for i in Admin.admins():
        if i == int(call.data.replace("unlock_delete_admin_", "")):
            admins.append([i, "unlocked"])
        else:
            admins.append([i, "locked"])
    await call.message.edit_reply_markup(kb.menu_admins(admins))

@core.dp.callback_query_handler(CallEqual("admin_locked"), IsAdmin())
async def admin_locked(call: CallbackQuery):
    await call.answer("‚ö† –ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ!")

@core.dp.callback_query_handler(CallStart("delete_admin_"), IsAdmin())
async def delete_admin(call: CallbackQuery):
    admin_id = int(call.data.replace("delete_admin_", ""))
    Admin.delete(admin_id)
    await call.message.edit_reply_markup(kb.menu_admins([[i, "locked"] for i in Admin.admins()]))
    await call.answer("‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    core.logger.make_log(f"User id{admin_id} has been deleted from admin list", initiator=core.main_admin)